{"version":3,"sources":["actions/api.js","actions/dCandidate.js","reducers/dCandidate.js","reducers/index.js","actions/store.js","components/useForm.js","components/DCandidateForm.js","components/DCandidates.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["baseUrl","url","fetchAll","axios","get","fetchById","id","create","newRecord","post","update","updateRecord","put","delete","ACTION_TYPES","formatData","data","age","parseInt","initialState","list","reducers","combineReducers","dCandidate","state","action","type","payload","map","x","filter","store","createStore","compose","applyMiddleware","thunk","useForm","initialFieldValues","validate","setCurrentId","useState","values","setValues","errors","setErrors","handleInputChange","e","target","name","value","fieldValue","resetForm","fullName","mobile","email","bloodGroup","address","mapDispatchToProps","createDCandidate","onSuccess","dispatch","console","log","api","then","res","catch","err","updateDCandidate","connect","dCandidateList","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","classes","props","addToast","useToasts","fieldValues","temp","test","Object","every","inputLabel","useRef","labelWidth","setLabelWidth","useEffect","current","offsetWidth","currentId","find","autoComplete","noValidate","className","onSubmit","preventDefault","appearance","Grid","container","item","xs","TextField","variant","label","onChange","error","helperText","FormControl","InputLabel","ref","Select","MenuItem","FormHelperText","Button","color","onClick","fetchAllDCandidates","response","deleteDCandidate","fontSize","paper","padding","Paper","elevation","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","record","index","key","hover","ButtonGroup","window","confirm","App","autoDismiss","Container","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.93b109d2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = 'http://localhost:52908/api/';\r\n\r\nexport default {\r\n    dCandidate(url = baseUrl + 'dcandidates/') {\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            fetchById: id => axios.get(url + id),\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n            delete: id => axios.delete(url + id),\r\n        };\r\n    },\r\n};\r\n","import api  from './api';\r\n\r\nexport const ACTION_TYPES = {\r\n    CREATE: 'CREATE',\r\n    UPDATE: 'UPDATE',\r\n    DELETE: 'DELETE',\r\n    FETCH_ALL: 'FETCH_ALL',\r\n};\r\n\r\nconst formatData = data => ({\r\n    ...data,\r\n    age: parseInt(data.age ? data.age : 0)\r\n});\r\n\r\nexport const fetchAll = () => dispatch => {\r\n    // get api request\r\n    api.dCandidate()\r\n        .fetchAll()\r\n        .then(response => {\r\n            dispatch({\r\n                type: ACTION_TYPES.FETCH_ALL,\r\n                payload: response.data,\r\n            });\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const create = (data, onSuccess) => dispatch => {\r\n    data = formatData(data);\r\n    console.log(data);\r\n    api.dCandidate().create(data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.CREATE,\r\n                payload: res.data,\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\nexport const update = (id, data, onSuccess) => dispatch => {\r\n    data = formatData(data);\r\n    api.dCandidate().update(id, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.UPDATE,\r\n                payload: {id: id, ...data}\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n\r\nexport const deleteCreator = (id, onSuccess) => dispatch => {\r\n    api.dCandidate().delete(id)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.DELETE,\r\n                payload: id\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err));\r\n}\r\n","import { ACTION_TYPES } from '../actions/dCandidate';\r\nconst initialState = {\r\n    list: [],\r\n};\r\n\r\nexport const dCandidate = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                list: [...action.payload],\r\n            };\r\n\r\n        case ACTION_TYPES.CREATE:\r\n            return {\r\n                ...state,\r\n                list: [...state.list, action.payload],\r\n            };\r\n        case ACTION_TYPES.UPDATE:\r\n            return {\r\n                ...state,\r\n                list: state.list.map(x =>\r\n                    x.id == action.payload.id ? action.payload : x,\r\n                ),\r\n            };\r\n        case ACTION_TYPES.DELETE:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(x => x.id != action.payload),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { dCandidate} from './dCandidate';\r\n\r\nexport const reducers = combineReducers({\r\n    dCandidate\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(reducers, compose(applyMiddleware(thunk)));\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst useForm = (initialFieldValues, validate, setCurrentId) => {\r\n    const [values, setValues] = useState(initialFieldValues);\r\n    const [errors, setErrors] = useState({});\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target;\r\n        const fieldValue = { [name]: value };\r\n        setValues({\r\n            ...values,\r\n            ...fieldValue,\r\n        });\r\n        validate(fieldValue);\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setValues({\r\n            ...initialFieldValues\r\n        });\r\n        setErrors({});\r\n        setCurrentId(0);\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm,\r\n    };\r\n};\r\n\r\nexport default useForm;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    withStyles,\r\n    FormControl,\r\n    Select,\r\n    MenuItem,\r\n    InputLabel,\r\n    Button,\r\n    FormHelperText,\r\n} from '@material-ui/core';\r\nimport useForm from './useForm';\r\nimport * as actions from '../actions/dCandidate';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n});\r\n\r\nconst initialFieldValues = {\r\n    fullName: '',\r\n    mobile: '',\r\n    email: '',\r\n    age: '',\r\n    bloodGroup: '',\r\n    address: '',\r\n};\r\n\r\nconst DCandidateForm = ({ classes, ...props }) => {\r\n    const { addToast } = useToasts();\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors };\r\n        if ('fullName' in fieldValues) {\r\n            temp.fullName = fieldValues.fullName\r\n                ? ''\r\n                : 'This field is required.';\r\n        }\r\n        if ('mobile' in fieldValues) {\r\n            temp.mobile = fieldValues.mobile ? '' : 'This field is required.';\r\n        }\r\n        if ('bloodGroup' in fieldValues) {\r\n            temp.bloodGroup = fieldValues.bloodGroup\r\n                ? ''\r\n                : 'This field is required.';\r\n        }\r\n        if ('email' in fieldValues) {\r\n            temp.email = /^$|.+@.+..+/.test(fieldValues.email)\r\n                ? ''\r\n                : 'Email is not valid.';\r\n        }\r\n\r\n        setErrors({\r\n            ...temp,\r\n        });\r\n\r\n        if (fieldValues == values) {\r\n            return Object.values(temp).every(x => x == '');\r\n        }\r\n    };\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm,\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId);\r\n\r\n    const inputLabel = useRef(null);\r\n    const [labelWidth, setLabelWidth] = useState(0);\r\n    useEffect(() => {\r\n        setLabelWidth(inputLabel.current.offsetWidth);\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (validate()) {\r\n            const onSuccess = () => {\r\n                resetForm()\r\n                addToast('Submitted successfully', { appearance: 'success' });\r\n            };\r\n            if (props.currentId == 0) {\r\n                props.createDCandidate(values, onSuccess);\r\n            } else {\r\n                props.updateDCandidate(props.currentId, values, onSuccess);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.currentId != 0) {\r\n            setValues({\r\n                ...props.dCandidateList.find(x => x.id == props.currentId),\r\n            });\r\n            setErrors({});\r\n        }\r\n    }, [props.currentId]);\r\n\r\n    return (\r\n        <form\r\n            autoComplete=\"off\"\r\n            noValidate\r\n            className={classes.root}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        name=\"fullName\"\r\n                        variant=\"outlined\"\r\n                        label=\"Full Name\"\r\n                        value={values.fullName}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.fullName && {\r\n                            error: true,\r\n                            helperText: errors.fullName,\r\n                        })}\r\n                    />\r\n                    <TextField\r\n                        name=\"email\"\r\n                        variant=\"outlined\"\r\n                        label=\"Email\"\r\n                        value={values.email}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.email && {\r\n                            error: true,\r\n                            helperText: errors.email,\r\n                        })}\r\n                    />\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControl}\r\n                        {...(errors.bloodGroup && { error: true })}\r\n                    >\r\n                        <InputLabel ref={inputLabel}>Blood Group</InputLabel>\r\n                        <Select\r\n                            name=\"bloodGroup\"\r\n                            value={values.bloodGroup}\r\n                            onChange={handleInputChange}\r\n                            labelWidth={labelWidth}\r\n                        >\r\n                            <MenuItem value=\"\">Select Blood Group</MenuItem>\r\n                            <MenuItem value=\"A+\">A +ve</MenuItem>\r\n                            <MenuItem value=\"A-\">A -ve</MenuItem>\r\n                            <MenuItem value=\"B+\">B +ve</MenuItem>\r\n                            <MenuItem value=\"B-\">B -ve</MenuItem>\r\n                            <MenuItem value=\"AB+\">AB +ve</MenuItem>\r\n                            <MenuItem value=\"AB-\">AB -ve</MenuItem>\r\n                            <MenuItem value=\"O+\">O +ve</MenuItem>\r\n                            <MenuItem value=\"O-\">O -ve</MenuItem>\r\n                        </Select>\r\n                        {errors.bloodGroup && (\r\n                            <FormHelperText>{errors.bloodGroup}</FormHelperText>\r\n                        )}\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        name=\"mobile\"\r\n                        variant=\"outlined\"\r\n                        label=\"Mobile\"\r\n                        value={values.mobile}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.mobile && {\r\n                            error: true,\r\n                            helperText: errors.mobile,\r\n                        })}\r\n                    />\r\n                    <TextField\r\n                        name=\"age\"\r\n                        variant=\"outlined\"\r\n                        label=\"Age\"\r\n                        value={values.age}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <TextField\r\n                        name=\"address\"\r\n                        variant=\"outlined\"\r\n                        label=\"Address\"\r\n                        value={values.address}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            className={classes.smMargin}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className={classes.smMargin}\r\n                            onClick={resetForm}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dCandidateList: state.dCandidate.list,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    createDCandidate: actions.create,\r\n    updateDCandidate: actions.update,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(withStyles(styles)(DCandidateForm));\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/dCandidate';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    withStyles,\r\n    ButtonGroup,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport DCandidateForm from './DCandidateForm';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTableCell-head': {\r\n            fontSize: '1.25rem',\r\n        },\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n    },\r\n});\r\n\r\nconst DCandidates = ({ classes, ...props }) => {\r\n    const { addToast } = useToasts();\r\n\r\n    const [currentId, setCurrentId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        props.fetchAllDCandidates();\r\n    }, []);\r\n\r\n    const onDelete = id => {\r\n        if (window.confirm('Are you sure?')) {\r\n            props.deleteDCandidate(id, () =>\r\n                addToast('Deleted successfully', { appearance: 'info' }),\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.paper} elevation=\"3\">\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <DCandidateForm {...{ currentId, setCurrentId }} />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <TableHead className={classes.root}>\r\n                                <TableRow>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell>Mobile</TableCell>\r\n                                    <TableCell>Blood Group</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {props.dCandidateList.map((record, index) => {\r\n                                    return (\r\n                                        <TableRow key={index} hover>\r\n                                            <TableCell>\r\n                                                {record.fullName}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {record.mobile}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {record.bloodGroup}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <ButtonGroup variant=\"text\">\r\n                                                    <Button>\r\n                                                        <EditIcon\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => {\r\n                                                                setCurrentId(\r\n                                                                    record.id,\r\n                                                                );\r\n                                                            }}\r\n                                                        />\r\n                                                    </Button>\r\n                                                    <Button>\r\n                                                        <DeleteIcon\r\n                                                            color=\"secondary\"\r\n                                                            onClick={() =>\r\n                                                                onDelete(\r\n                                                                    record.id,\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                    </Button>\r\n                                                </ButtonGroup>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dCandidateList: state.dCandidate.list,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchAllDCandidates: actions.fetchAll,\r\n    deleteDCandidate: actions.deleteCreator,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(withStyles(styles)(DCandidates));\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { store } from './actions/store';\nimport { Provider } from 'react-redux';\nimport DCandidates from './components/DCandidates';\nimport { Container } from '@material-ui/core';\nimport { ToastProvider } from \"react-toast-notifications\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <ToastProvider autoDismiss={true}>\n              <Container maxWidth=\"lg\">\n                  <DCandidates />\n              </Container>\n            </ToastProvider>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}